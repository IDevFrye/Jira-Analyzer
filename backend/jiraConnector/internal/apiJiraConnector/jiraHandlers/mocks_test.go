// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package jirahandlers

import (
	"github.com/jiraconnector/internal/dataTransformer"
	"github.com/jiraconnector/internal/structures"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJiraServiceInterface creates a new instance of MockJiraServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJiraServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJiraServiceInterface {
	mock := &MockJiraServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJiraServiceInterface is an autogenerated mock type for the JiraServiceInterface type
type MockJiraServiceInterface struct {
	mock.Mock
}

type MockJiraServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJiraServiceInterface) EXPECT() *MockJiraServiceInterface_Expecter {
	return &MockJiraServiceInterface_Expecter{mock: &_m.Mock}
}

// GetProjectsPage provides a mock function for the type MockJiraServiceInterface
func (_mock *MockJiraServiceInterface) GetProjectsPage(search string, limit int, page int) (*structures.ResponseProject, error) {
	ret := _mock.Called(search, limit, page)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsPage")
	}

	var r0 *structures.ResponseProject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (*structures.ResponseProject, error)); ok {
		return returnFunc(search, limit, page)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) *structures.ResponseProject); ok {
		r0 = returnFunc(search, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.ResponseProject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(search, limit, page)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJiraServiceInterface_GetProjectsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsPage'
type MockJiraServiceInterface_GetProjectsPage_Call struct {
	*mock.Call
}

// GetProjectsPage is a helper method to define mock.On call
//   - search
//   - limit
//   - page
func (_e *MockJiraServiceInterface_Expecter) GetProjectsPage(search interface{}, limit interface{}, page interface{}) *MockJiraServiceInterface_GetProjectsPage_Call {
	return &MockJiraServiceInterface_GetProjectsPage_Call{Call: _e.mock.On("GetProjectsPage", search, limit, page)}
}

func (_c *MockJiraServiceInterface_GetProjectsPage_Call) Run(run func(search string, limit int, page int)) *MockJiraServiceInterface_GetProjectsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockJiraServiceInterface_GetProjectsPage_Call) Return(responseProject *structures.ResponseProject, err error) *MockJiraServiceInterface_GetProjectsPage_Call {
	_c.Call.Return(responseProject, err)
	return _c
}

func (_c *MockJiraServiceInterface_GetProjectsPage_Call) RunAndReturn(run func(search string, limit int, page int) (*structures.ResponseProject, error)) *MockJiraServiceInterface_GetProjectsPage_Call {
	_c.Call.Return(run)
	return _c
}

// PushDataToDb provides a mock function for the type MockJiraServiceInterface
func (_mock *MockJiraServiceInterface) PushDataToDb(project string, issues []structures.JiraIssue) error {
	ret := _mock.Called(project, issues)

	if len(ret) == 0 {
		panic("no return value specified for PushDataToDb")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []structures.JiraIssue) error); ok {
		r0 = returnFunc(project, issues)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJiraServiceInterface_PushDataToDb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushDataToDb'
type MockJiraServiceInterface_PushDataToDb_Call struct {
	*mock.Call
}

// PushDataToDb is a helper method to define mock.On call
//   - project
//   - issues
func (_e *MockJiraServiceInterface_Expecter) PushDataToDb(project interface{}, issues interface{}) *MockJiraServiceInterface_PushDataToDb_Call {
	return &MockJiraServiceInterface_PushDataToDb_Call{Call: _e.mock.On("PushDataToDb", project, issues)}
}

func (_c *MockJiraServiceInterface_PushDataToDb_Call) Run(run func(project string, issues []structures.JiraIssue)) *MockJiraServiceInterface_PushDataToDb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]structures.JiraIssue))
	})
	return _c
}

func (_c *MockJiraServiceInterface_PushDataToDb_Call) Return(err error) *MockJiraServiceInterface_PushDataToDb_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJiraServiceInterface_PushDataToDb_Call) RunAndReturn(run func(project string, issues []structures.JiraIssue) error) *MockJiraServiceInterface_PushDataToDb_Call {
	_c.Call.Return(run)
	return _c
}

// TransformDataToDb provides a mock function for the type MockJiraServiceInterface
func (_mock *MockJiraServiceInterface) TransformDataToDb(project *structures.JiraProject, issues []structures.JiraIssue) []datatransformer.DataTransformer {
	ret := _mock.Called(project, issues)

	if len(ret) == 0 {
		panic("no return value specified for TransformDataToDb")
	}

	var r0 []datatransformer.DataTransformer
	if returnFunc, ok := ret.Get(0).(func(*structures.JiraProject, []structures.JiraIssue) []datatransformer.DataTransformer); ok {
		r0 = returnFunc(project, issues)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datatransformer.DataTransformer)
		}
	}
	return r0
}

// MockJiraServiceInterface_TransformDataToDb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformDataToDb'
type MockJiraServiceInterface_TransformDataToDb_Call struct {
	*mock.Call
}

// TransformDataToDb is a helper method to define mock.On call
//   - project
//   - issues
func (_e *MockJiraServiceInterface_Expecter) TransformDataToDb(project interface{}, issues interface{}) *MockJiraServiceInterface_TransformDataToDb_Call {
	return &MockJiraServiceInterface_TransformDataToDb_Call{Call: _e.mock.On("TransformDataToDb", project, issues)}
}

func (_c *MockJiraServiceInterface_TransformDataToDb_Call) Run(run func(project *structures.JiraProject, issues []structures.JiraIssue)) *MockJiraServiceInterface_TransformDataToDb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*structures.JiraProject), args[1].([]structures.JiraIssue))
	})
	return _c
}

func (_c *MockJiraServiceInterface_TransformDataToDb_Call) Return(dataTransformers []datatransformer.DataTransformer) *MockJiraServiceInterface_TransformDataToDb_Call {
	_c.Call.Return(dataTransformers)
	return _c
}

func (_c *MockJiraServiceInterface_TransformDataToDb_Call) RunAndReturn(run func(project *structures.JiraProject, issues []structures.JiraIssue) []datatransformer.DataTransformer) *MockJiraServiceInterface_TransformDataToDb_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjects provides a mock function for the type MockJiraServiceInterface
func (_mock *MockJiraServiceInterface) UpdateProjects(projectId string) ([]structures.JiraIssue, error) {
	ret := _mock.Called(projectId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjects")
	}

	var r0 []structures.JiraIssue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]structures.JiraIssue, error)); ok {
		return returnFunc(projectId)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []structures.JiraIssue); ok {
		r0 = returnFunc(projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]structures.JiraIssue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(projectId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJiraServiceInterface_UpdateProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjects'
type MockJiraServiceInterface_UpdateProjects_Call struct {
	*mock.Call
}

// UpdateProjects is a helper method to define mock.On call
//   - projectId
func (_e *MockJiraServiceInterface_Expecter) UpdateProjects(projectId interface{}) *MockJiraServiceInterface_UpdateProjects_Call {
	return &MockJiraServiceInterface_UpdateProjects_Call{Call: _e.mock.On("UpdateProjects", projectId)}
}

func (_c *MockJiraServiceInterface_UpdateProjects_Call) Run(run func(projectId string)) *MockJiraServiceInterface_UpdateProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJiraServiceInterface_UpdateProjects_Call) Return(jiraIssues []structures.JiraIssue, err error) *MockJiraServiceInterface_UpdateProjects_Call {
	_c.Call.Return(jiraIssues, err)
	return _c
}

func (_c *MockJiraServiceInterface_UpdateProjects_Call) RunAndReturn(run func(projectId string) ([]structures.JiraIssue, error)) *MockJiraServiceInterface_UpdateProjects_Call {
	_c.Call.Return(run)
	return _c
}
