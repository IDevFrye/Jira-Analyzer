// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package jiraservice

import (
	"github.com/jiraconnector/internal/dataTransformer"
	"github.com/jiraconnector/internal/structures"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJiraConnectorInterface creates a new instance of MockJiraConnectorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJiraConnectorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJiraConnectorInterface {
	mock := &MockJiraConnectorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJiraConnectorInterface is an autogenerated mock type for the JiraConnectorInterface type
type MockJiraConnectorInterface struct {
	mock.Mock
}

type MockJiraConnectorInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJiraConnectorInterface) EXPECT() *MockJiraConnectorInterface_Expecter {
	return &MockJiraConnectorInterface_Expecter{mock: &_m.Mock}
}

// GetAllProjects provides a mock function for the type MockJiraConnectorInterface
func (_mock *MockJiraConnectorInterface) GetAllProjects() ([]structures.JiraProject, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProjects")
	}

	var r0 []structures.JiraProject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]structures.JiraProject, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []structures.JiraProject); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]structures.JiraProject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJiraConnectorInterface_GetAllProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProjects'
type MockJiraConnectorInterface_GetAllProjects_Call struct {
	*mock.Call
}

// GetAllProjects is a helper method to define mock.On call
func (_e *MockJiraConnectorInterface_Expecter) GetAllProjects() *MockJiraConnectorInterface_GetAllProjects_Call {
	return &MockJiraConnectorInterface_GetAllProjects_Call{Call: _e.mock.On("GetAllProjects")}
}

func (_c *MockJiraConnectorInterface_GetAllProjects_Call) Run(run func()) *MockJiraConnectorInterface_GetAllProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJiraConnectorInterface_GetAllProjects_Call) Return(jiraProjects []structures.JiraProject, err error) *MockJiraConnectorInterface_GetAllProjects_Call {
	_c.Call.Return(jiraProjects, err)
	return _c
}

func (_c *MockJiraConnectorInterface_GetAllProjects_Call) RunAndReturn(run func() ([]structures.JiraProject, error)) *MockJiraConnectorInterface_GetAllProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByKey provides a mock function for the type MockJiraConnectorInterface
func (_mock *MockJiraConnectorInterface) GetProjectByKey(projectKey string) (*structures.JiraProject, error) {
	ret := _mock.Called(projectKey)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByKey")
	}

	var r0 *structures.JiraProject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*structures.JiraProject, error)); ok {
		return returnFunc(projectKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *structures.JiraProject); ok {
		r0 = returnFunc(projectKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.JiraProject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(projectKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJiraConnectorInterface_GetProjectByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByKey'
type MockJiraConnectorInterface_GetProjectByKey_Call struct {
	*mock.Call
}

// GetProjectByKey is a helper method to define mock.On call
//   - projectKey
func (_e *MockJiraConnectorInterface_Expecter) GetProjectByKey(projectKey interface{}) *MockJiraConnectorInterface_GetProjectByKey_Call {
	return &MockJiraConnectorInterface_GetProjectByKey_Call{Call: _e.mock.On("GetProjectByKey", projectKey)}
}

func (_c *MockJiraConnectorInterface_GetProjectByKey_Call) Run(run func(projectKey string)) *MockJiraConnectorInterface_GetProjectByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJiraConnectorInterface_GetProjectByKey_Call) Return(jiraProject *structures.JiraProject, err error) *MockJiraConnectorInterface_GetProjectByKey_Call {
	_c.Call.Return(jiraProject, err)
	return _c
}

func (_c *MockJiraConnectorInterface_GetProjectByKey_Call) RunAndReturn(run func(projectKey string) (*structures.JiraProject, error)) *MockJiraConnectorInterface_GetProjectByKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectIssues provides a mock function for the type MockJiraConnectorInterface
func (_mock *MockJiraConnectorInterface) GetProjectIssues(project string) ([]structures.JiraIssue, error) {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectIssues")
	}

	var r0 []structures.JiraIssue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]structures.JiraIssue, error)); ok {
		return returnFunc(project)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []structures.JiraIssue); ok {
		r0 = returnFunc(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]structures.JiraIssue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(project)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJiraConnectorInterface_GetProjectIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectIssues'
type MockJiraConnectorInterface_GetProjectIssues_Call struct {
	*mock.Call
}

// GetProjectIssues is a helper method to define mock.On call
//   - project
func (_e *MockJiraConnectorInterface_Expecter) GetProjectIssues(project interface{}) *MockJiraConnectorInterface_GetProjectIssues_Call {
	return &MockJiraConnectorInterface_GetProjectIssues_Call{Call: _e.mock.On("GetProjectIssues", project)}
}

func (_c *MockJiraConnectorInterface_GetProjectIssues_Call) Run(run func(project string)) *MockJiraConnectorInterface_GetProjectIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJiraConnectorInterface_GetProjectIssues_Call) Return(jiraIssues []structures.JiraIssue, err error) *MockJiraConnectorInterface_GetProjectIssues_Call {
	_c.Call.Return(jiraIssues, err)
	return _c
}

func (_c *MockJiraConnectorInterface_GetProjectIssues_Call) RunAndReturn(run func(project string) ([]structures.JiraIssue, error)) *MockJiraConnectorInterface_GetProjectIssues_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsPage provides a mock function for the type MockJiraConnectorInterface
func (_mock *MockJiraConnectorInterface) GetProjectsPage(search string, limit int, page int) (*structures.ResponseProject, error) {
	ret := _mock.Called(search, limit, page)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsPage")
	}

	var r0 *structures.ResponseProject
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (*structures.ResponseProject, error)); ok {
		return returnFunc(search, limit, page)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) *structures.ResponseProject); ok {
		r0 = returnFunc(search, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.ResponseProject)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(search, limit, page)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJiraConnectorInterface_GetProjectsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsPage'
type MockJiraConnectorInterface_GetProjectsPage_Call struct {
	*mock.Call
}

// GetProjectsPage is a helper method to define mock.On call
//   - search
//   - limit
//   - page
func (_e *MockJiraConnectorInterface_Expecter) GetProjectsPage(search interface{}, limit interface{}, page interface{}) *MockJiraConnectorInterface_GetProjectsPage_Call {
	return &MockJiraConnectorInterface_GetProjectsPage_Call{Call: _e.mock.On("GetProjectsPage", search, limit, page)}
}

func (_c *MockJiraConnectorInterface_GetProjectsPage_Call) Run(run func(search string, limit int, page int)) *MockJiraConnectorInterface_GetProjectsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockJiraConnectorInterface_GetProjectsPage_Call) Return(responseProject *structures.ResponseProject, err error) *MockJiraConnectorInterface_GetProjectsPage_Call {
	_c.Call.Return(responseProject, err)
	return _c
}

func (_c *MockJiraConnectorInterface_GetProjectsPage_Call) RunAndReturn(run func(search string, limit int, page int) (*structures.ResponseProject, error)) *MockJiraConnectorInterface_GetProjectsPage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataTransformerInterface creates a new instance of MockDataTransformerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataTransformerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataTransformerInterface {
	mock := &MockDataTransformerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDataTransformerInterface is an autogenerated mock type for the DataTransformerInterface type
type MockDataTransformerInterface struct {
	mock.Mock
}

type MockDataTransformerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataTransformerInterface) EXPECT() *MockDataTransformerInterface_Expecter {
	return &MockDataTransformerInterface_Expecter{mock: &_m.Mock}
}

// TransformAuthorDB provides a mock function for the type MockDataTransformerInterface
func (_mock *MockDataTransformerInterface) TransformAuthorDB(jiraAuthor *structures.User) *structures.DBAuthor {
	ret := _mock.Called(jiraAuthor)

	if len(ret) == 0 {
		panic("no return value specified for TransformAuthorDB")
	}

	var r0 *structures.DBAuthor
	if returnFunc, ok := ret.Get(0).(func(*structures.User) *structures.DBAuthor); ok {
		r0 = returnFunc(jiraAuthor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.DBAuthor)
		}
	}
	return r0
}

// MockDataTransformerInterface_TransformAuthorDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformAuthorDB'
type MockDataTransformerInterface_TransformAuthorDB_Call struct {
	*mock.Call
}

// TransformAuthorDB is a helper method to define mock.On call
//   - jiraAuthor
func (_e *MockDataTransformerInterface_Expecter) TransformAuthorDB(jiraAuthor interface{}) *MockDataTransformerInterface_TransformAuthorDB_Call {
	return &MockDataTransformerInterface_TransformAuthorDB_Call{Call: _e.mock.On("TransformAuthorDB", jiraAuthor)}
}

func (_c *MockDataTransformerInterface_TransformAuthorDB_Call) Run(run func(jiraAuthor *structures.User)) *MockDataTransformerInterface_TransformAuthorDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*structures.User))
	})
	return _c
}

func (_c *MockDataTransformerInterface_TransformAuthorDB_Call) Return(dBAuthor *structures.DBAuthor) *MockDataTransformerInterface_TransformAuthorDB_Call {
	_c.Call.Return(dBAuthor)
	return _c
}

func (_c *MockDataTransformerInterface_TransformAuthorDB_Call) RunAndReturn(run func(jiraAuthor *structures.User) *structures.DBAuthor) *MockDataTransformerInterface_TransformAuthorDB_Call {
	_c.Call.Return(run)
	return _c
}

// TransformIssueDB provides a mock function for the type MockDataTransformerInterface
func (_mock *MockDataTransformerInterface) TransformIssueDB(jiraIssue *structures.JiraIssue) *structures.DBIssue {
	ret := _mock.Called(jiraIssue)

	if len(ret) == 0 {
		panic("no return value specified for TransformIssueDB")
	}

	var r0 *structures.DBIssue
	if returnFunc, ok := ret.Get(0).(func(*structures.JiraIssue) *structures.DBIssue); ok {
		r0 = returnFunc(jiraIssue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.DBIssue)
		}
	}
	return r0
}

// MockDataTransformerInterface_TransformIssueDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformIssueDB'
type MockDataTransformerInterface_TransformIssueDB_Call struct {
	*mock.Call
}

// TransformIssueDB is a helper method to define mock.On call
//   - jiraIssue
func (_e *MockDataTransformerInterface_Expecter) TransformIssueDB(jiraIssue interface{}) *MockDataTransformerInterface_TransformIssueDB_Call {
	return &MockDataTransformerInterface_TransformIssueDB_Call{Call: _e.mock.On("TransformIssueDB", jiraIssue)}
}

func (_c *MockDataTransformerInterface_TransformIssueDB_Call) Run(run func(jiraIssue *structures.JiraIssue)) *MockDataTransformerInterface_TransformIssueDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*structures.JiraIssue))
	})
	return _c
}

func (_c *MockDataTransformerInterface_TransformIssueDB_Call) Return(dBIssue *structures.DBIssue) *MockDataTransformerInterface_TransformIssueDB_Call {
	_c.Call.Return(dBIssue)
	return _c
}

func (_c *MockDataTransformerInterface_TransformIssueDB_Call) RunAndReturn(run func(jiraIssue *structures.JiraIssue) *structures.DBIssue) *MockDataTransformerInterface_TransformIssueDB_Call {
	_c.Call.Return(run)
	return _c
}

// TransformProjectDB provides a mock function for the type MockDataTransformerInterface
func (_mock *MockDataTransformerInterface) TransformProjectDB(jiraProject *structures.JiraProject) *structures.DBProject {
	ret := _mock.Called(jiraProject)

	if len(ret) == 0 {
		panic("no return value specified for TransformProjectDB")
	}

	var r0 *structures.DBProject
	if returnFunc, ok := ret.Get(0).(func(*structures.JiraProject) *structures.DBProject); ok {
		r0 = returnFunc(jiraProject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.DBProject)
		}
	}
	return r0
}

// MockDataTransformerInterface_TransformProjectDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformProjectDB'
type MockDataTransformerInterface_TransformProjectDB_Call struct {
	*mock.Call
}

// TransformProjectDB is a helper method to define mock.On call
//   - jiraProject
func (_e *MockDataTransformerInterface_Expecter) TransformProjectDB(jiraProject interface{}) *MockDataTransformerInterface_TransformProjectDB_Call {
	return &MockDataTransformerInterface_TransformProjectDB_Call{Call: _e.mock.On("TransformProjectDB", jiraProject)}
}

func (_c *MockDataTransformerInterface_TransformProjectDB_Call) Run(run func(jiraProject *structures.JiraProject)) *MockDataTransformerInterface_TransformProjectDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*structures.JiraProject))
	})
	return _c
}

func (_c *MockDataTransformerInterface_TransformProjectDB_Call) Return(dBProject *structures.DBProject) *MockDataTransformerInterface_TransformProjectDB_Call {
	_c.Call.Return(dBProject)
	return _c
}

func (_c *MockDataTransformerInterface_TransformProjectDB_Call) RunAndReturn(run func(jiraProject *structures.JiraProject) *structures.DBProject) *MockDataTransformerInterface_TransformProjectDB_Call {
	_c.Call.Return(run)
	return _c
}

// TransformStatusDB provides a mock function for the type MockDataTransformerInterface
func (_mock *MockDataTransformerInterface) TransformStatusDB(jiraChanges *structures.Changelog) map[string]structures.DBStatusChanges {
	ret := _mock.Called(jiraChanges)

	if len(ret) == 0 {
		panic("no return value specified for TransformStatusDB")
	}

	var r0 map[string]structures.DBStatusChanges
	if returnFunc, ok := ret.Get(0).(func(*structures.Changelog) map[string]structures.DBStatusChanges); ok {
		r0 = returnFunc(jiraChanges)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]structures.DBStatusChanges)
		}
	}
	return r0
}

// MockDataTransformerInterface_TransformStatusDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformStatusDB'
type MockDataTransformerInterface_TransformStatusDB_Call struct {
	*mock.Call
}

// TransformStatusDB is a helper method to define mock.On call
//   - jiraChanges
func (_e *MockDataTransformerInterface_Expecter) TransformStatusDB(jiraChanges interface{}) *MockDataTransformerInterface_TransformStatusDB_Call {
	return &MockDataTransformerInterface_TransformStatusDB_Call{Call: _e.mock.On("TransformStatusDB", jiraChanges)}
}

func (_c *MockDataTransformerInterface_TransformStatusDB_Call) Run(run func(jiraChanges *structures.Changelog)) *MockDataTransformerInterface_TransformStatusDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*structures.Changelog))
	})
	return _c
}

func (_c *MockDataTransformerInterface_TransformStatusDB_Call) Return(stringToDBStatusChanges map[string]structures.DBStatusChanges) *MockDataTransformerInterface_TransformStatusDB_Call {
	_c.Call.Return(stringToDBStatusChanges)
	return _c
}

func (_c *MockDataTransformerInterface_TransformStatusDB_Call) RunAndReturn(run func(jiraChanges *structures.Changelog) map[string]structures.DBStatusChanges) *MockDataTransformerInterface_TransformStatusDB_Call {
	_c.Call.Return(run)
	return _c
}

// TransformToDbIssueSet provides a mock function for the type MockDataTransformerInterface
func (_mock *MockDataTransformerInterface) TransformToDbIssueSet(project *structures.JiraProject, jiraIssue *structures.JiraIssue) *datatransformer.DataTransformer {
	ret := _mock.Called(project, jiraIssue)

	if len(ret) == 0 {
		panic("no return value specified for TransformToDbIssueSet")
	}

	var r0 *datatransformer.DataTransformer
	if returnFunc, ok := ret.Get(0).(func(*structures.JiraProject, *structures.JiraIssue) *datatransformer.DataTransformer); ok {
		r0 = returnFunc(project, jiraIssue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datatransformer.DataTransformer)
		}
	}
	return r0
}

// MockDataTransformerInterface_TransformToDbIssueSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransformToDbIssueSet'
type MockDataTransformerInterface_TransformToDbIssueSet_Call struct {
	*mock.Call
}

// TransformToDbIssueSet is a helper method to define mock.On call
//   - project
//   - jiraIssue
func (_e *MockDataTransformerInterface_Expecter) TransformToDbIssueSet(project interface{}, jiraIssue interface{}) *MockDataTransformerInterface_TransformToDbIssueSet_Call {
	return &MockDataTransformerInterface_TransformToDbIssueSet_Call{Call: _e.mock.On("TransformToDbIssueSet", project, jiraIssue)}
}

func (_c *MockDataTransformerInterface_TransformToDbIssueSet_Call) Run(run func(project *structures.JiraProject, jiraIssue *structures.JiraIssue)) *MockDataTransformerInterface_TransformToDbIssueSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*structures.JiraProject), args[1].(*structures.JiraIssue))
	})
	return _c
}

func (_c *MockDataTransformerInterface_TransformToDbIssueSet_Call) Return(dataTransformer *datatransformer.DataTransformer) *MockDataTransformerInterface_TransformToDbIssueSet_Call {
	_c.Call.Return(dataTransformer)
	return _c
}

func (_c *MockDataTransformerInterface_TransformToDbIssueSet_Call) RunAndReturn(run func(project *structures.JiraProject, jiraIssue *structures.JiraIssue) *datatransformer.DataTransformer) *MockDataTransformerInterface_TransformToDbIssueSet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDbPusherInterface creates a new instance of MockDbPusherInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDbPusherInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDbPusherInterface {
	mock := &MockDbPusherInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDbPusherInterface is an autogenerated mock type for the DbPusherInterface type
type MockDbPusherInterface struct {
	mock.Mock
}

type MockDbPusherInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDbPusherInterface) EXPECT() *MockDbPusherInterface_Expecter {
	return &MockDbPusherInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockDbPusherInterface
func (_mock *MockDbPusherInterface) Close() {
	_mock.Called()
	return
}

// MockDbPusherInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDbPusherInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDbPusherInterface_Expecter) Close() *MockDbPusherInterface_Close_Call {
	return &MockDbPusherInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDbPusherInterface_Close_Call) Run(run func()) *MockDbPusherInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDbPusherInterface_Close_Call) Return() *MockDbPusherInterface_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDbPusherInterface_Close_Call) RunAndReturn(run func()) *MockDbPusherInterface_Close_Call {
	_c.Run(run)
	return _c
}

// PushIssue provides a mock function for the type MockDbPusherInterface
func (_mock *MockDbPusherInterface) PushIssue(project *structures.DBProject, issue *datatransformer.DataTransformer) (int, error) {
	ret := _mock.Called(project, issue)

	if len(ret) == 0 {
		panic("no return value specified for PushIssue")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*structures.DBProject, *datatransformer.DataTransformer) (int, error)); ok {
		return returnFunc(project, issue)
	}
	if returnFunc, ok := ret.Get(0).(func(*structures.DBProject, *datatransformer.DataTransformer) int); ok {
		r0 = returnFunc(project, issue)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(*structures.DBProject, *datatransformer.DataTransformer) error); ok {
		r1 = returnFunc(project, issue)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDbPusherInterface_PushIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushIssue'
type MockDbPusherInterface_PushIssue_Call struct {
	*mock.Call
}

// PushIssue is a helper method to define mock.On call
//   - project
//   - issue
func (_e *MockDbPusherInterface_Expecter) PushIssue(project interface{}, issue interface{}) *MockDbPusherInterface_PushIssue_Call {
	return &MockDbPusherInterface_PushIssue_Call{Call: _e.mock.On("PushIssue", project, issue)}
}

func (_c *MockDbPusherInterface_PushIssue_Call) Run(run func(project *structures.DBProject, issue *datatransformer.DataTransformer)) *MockDbPusherInterface_PushIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*structures.DBProject), args[1].(*datatransformer.DataTransformer))
	})
	return _c
}

func (_c *MockDbPusherInterface_PushIssue_Call) Return(n int, err error) *MockDbPusherInterface_PushIssue_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDbPusherInterface_PushIssue_Call) RunAndReturn(run func(project *structures.DBProject, issue *datatransformer.DataTransformer) (int, error)) *MockDbPusherInterface_PushIssue_Call {
	_c.Call.Return(run)
	return _c
}

// PushIssues provides a mock function for the type MockDbPusherInterface
func (_mock *MockDbPusherInterface) PushIssues(project *structures.DBProject, issues []datatransformer.DataTransformer) error {
	ret := _mock.Called(project, issues)

	if len(ret) == 0 {
		panic("no return value specified for PushIssues")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*structures.DBProject, []datatransformer.DataTransformer) error); ok {
		r0 = returnFunc(project, issues)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDbPusherInterface_PushIssues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushIssues'
type MockDbPusherInterface_PushIssues_Call struct {
	*mock.Call
}

// PushIssues is a helper method to define mock.On call
//   - project
//   - issues
func (_e *MockDbPusherInterface_Expecter) PushIssues(project interface{}, issues interface{}) *MockDbPusherInterface_PushIssues_Call {
	return &MockDbPusherInterface_PushIssues_Call{Call: _e.mock.On("PushIssues", project, issues)}
}

func (_c *MockDbPusherInterface_PushIssues_Call) Run(run func(project *structures.DBProject, issues []datatransformer.DataTransformer)) *MockDbPusherInterface_PushIssues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*structures.DBProject), args[1].([]datatransformer.DataTransformer))
	})
	return _c
}

func (_c *MockDbPusherInterface_PushIssues_Call) Return(err error) *MockDbPusherInterface_PushIssues_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDbPusherInterface_PushIssues_Call) RunAndReturn(run func(project *structures.DBProject, issues []datatransformer.DataTransformer) error) *MockDbPusherInterface_PushIssues_Call {
	_c.Call.Return(run)
	return _c
}

// PushProject provides a mock function for the type MockDbPusherInterface
func (_mock *MockDbPusherInterface) PushProject(project *structures.DBProject) (int, error) {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for PushProject")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*structures.DBProject) (int, error)); ok {
		return returnFunc(project)
	}
	if returnFunc, ok := ret.Get(0).(func(*structures.DBProject) int); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(*structures.DBProject) error); ok {
		r1 = returnFunc(project)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDbPusherInterface_PushProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushProject'
type MockDbPusherInterface_PushProject_Call struct {
	*mock.Call
}

// PushProject is a helper method to define mock.On call
//   - project
func (_e *MockDbPusherInterface_Expecter) PushProject(project interface{}) *MockDbPusherInterface_PushProject_Call {
	return &MockDbPusherInterface_PushProject_Call{Call: _e.mock.On("PushProject", project)}
}

func (_c *MockDbPusherInterface_PushProject_Call) Run(run func(project *structures.DBProject)) *MockDbPusherInterface_PushProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*structures.DBProject))
	})
	return _c
}

func (_c *MockDbPusherInterface_PushProject_Call) Return(n int, err error) *MockDbPusherInterface_PushProject_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockDbPusherInterface_PushProject_Call) RunAndReturn(run func(project *structures.DBProject) (int, error)) *MockDbPusherInterface_PushProject_Call {
	_c.Call.Return(run)
	return _c
}

// PushProjects provides a mock function for the type MockDbPusherInterface
func (_mock *MockDbPusherInterface) PushProjects(projects []structures.DBProject) error {
	ret := _mock.Called(projects)

	if len(ret) == 0 {
		panic("no return value specified for PushProjects")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]structures.DBProject) error); ok {
		r0 = returnFunc(projects)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDbPusherInterface_PushProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushProjects'
type MockDbPusherInterface_PushProjects_Call struct {
	*mock.Call
}

// PushProjects is a helper method to define mock.On call
//   - projects
func (_e *MockDbPusherInterface_Expecter) PushProjects(projects interface{}) *MockDbPusherInterface_PushProjects_Call {
	return &MockDbPusherInterface_PushProjects_Call{Call: _e.mock.On("PushProjects", projects)}
}

func (_c *MockDbPusherInterface_PushProjects_Call) Run(run func(projects []structures.DBProject)) *MockDbPusherInterface_PushProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]structures.DBProject))
	})
	return _c
}

func (_c *MockDbPusherInterface_PushProjects_Call) Return(err error) *MockDbPusherInterface_PushProjects_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDbPusherInterface_PushProjects_Call) RunAndReturn(run func(projects []structures.DBProject) error) *MockDbPusherInterface_PushProjects_Call {
	_c.Call.Return(run)
	return _c
}

// PushStatusChanges provides a mock function for the type MockDbPusherInterface
func (_mock *MockDbPusherInterface) PushStatusChanges(issue int, changes *datatransformer.DataTransformer) error {
	ret := _mock.Called(issue, changes)

	if len(ret) == 0 {
		panic("no return value specified for PushStatusChanges")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int, *datatransformer.DataTransformer) error); ok {
		r0 = returnFunc(issue, changes)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDbPusherInterface_PushStatusChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushStatusChanges'
type MockDbPusherInterface_PushStatusChanges_Call struct {
	*mock.Call
}

// PushStatusChanges is a helper method to define mock.On call
//   - issue
//   - changes
func (_e *MockDbPusherInterface_Expecter) PushStatusChanges(issue interface{}, changes interface{}) *MockDbPusherInterface_PushStatusChanges_Call {
	return &MockDbPusherInterface_PushStatusChanges_Call{Call: _e.mock.On("PushStatusChanges", issue, changes)}
}

func (_c *MockDbPusherInterface_PushStatusChanges_Call) Run(run func(issue int, changes *datatransformer.DataTransformer)) *MockDbPusherInterface_PushStatusChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*datatransformer.DataTransformer))
	})
	return _c
}

func (_c *MockDbPusherInterface_PushStatusChanges_Call) Return(err error) *MockDbPusherInterface_PushStatusChanges_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDbPusherInterface_PushStatusChanges_Call) RunAndReturn(run func(issue int, changes *datatransformer.DataTransformer) error) *MockDbPusherInterface_PushStatusChanges_Call {
	_c.Call.Return(run)
	return _c
}
